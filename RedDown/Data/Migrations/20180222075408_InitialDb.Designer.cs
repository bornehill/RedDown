// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using RedDown.Data;
using System;

namespace RedDown.Migrations
{
    [DbContext(typeof(RedDownContext))]
    [Migration("20180222075408_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RedDown.Data.Entities.AuthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondLastName");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("RedDown.Data.Entities.Parent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgeBirth");

                    b.Property<string>("Apm");

                    b.Property<string>("App");

                    b.Property<string>("Name");

                    b.Property<byte>("Pupilage");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("RedDown.Data.Entities.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("ActActual");

                    b.Property<bool>("Auditiva");

                    b.Property<bool>("Biometria");

                    b.Property<bool>("CardioTipo");

                    b.Property<bool>("Dentista");

                    b.Property<bool>("Ecocardiograma");

                    b.Property<bool>("FuncTiroidea");

                    b.Property<string>("Fundacion");

                    b.Property<byte>("InterTemprana");

                    b.Property<bool>("MalaConducta");

                    b.Property<bool>("Nutriologo");

                    b.Property<bool>("Oftalmologica");

                    b.Property<bool>("Ortopedista");

                    b.Property<bool>("PosDormir");

                    b.Property<byte>("TerapiaAprenz");

                    b.Property<byte>("TerapiaFam");

                    b.Property<byte>("TerapiaLeng");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("RedDown.Data.Entities.RegistryDown", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apm");

                    b.Property<string>("App");

                    b.Property<DateTime>("BirthDate");

                    b.Property<byte>("BirthPlace");

                    b.Property<byte>("BrothersNumber");

                    b.Property<string>("Curp");

                    b.Property<byte>("DiagnosticTime");

                    b.Property<int?>("FatherId");

                    b.Property<byte>("MainCarer");

                    b.Property<byte>("MedicalCare");

                    b.Property<int?>("MotherId");

                    b.Property<string>("Name");

                    b.Property<int?>("QuestionsId");

                    b.Property<byte>("ResidencePlace");

                    b.Property<byte>("SonNumber");

                    b.HasKey("Id");

                    b.HasIndex("FatherId");

                    b.HasIndex("MotherId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("RegistryDowns");
                });

            modelBuilder.Entity("RedDown.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("RedDown.Data.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("RedDown.Data.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("RedDown.Data.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("RedDown.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("RedDown.Data.Entities.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RedDown.Data.Entities.RegistryDown", b =>
                {
                    b.HasOne("RedDown.Data.Entities.Parent", "Father")
                        .WithMany()
                        .HasForeignKey("FatherId");

                    b.HasOne("RedDown.Data.Entities.Parent", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherId");

                    b.HasOne("RedDown.Data.Entities.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");
                });

            modelBuilder.Entity("RedDown.Data.Entities.RoleClaim", b =>
                {
                    b.HasOne("RedDown.Data.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedDown.Data.Entities.UserClaim", b =>
                {
                    b.HasOne("RedDown.Data.Entities.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedDown.Data.Entities.UserLogin", b =>
                {
                    b.HasOne("RedDown.Data.Entities.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedDown.Data.Entities.UserRole", b =>
                {
                    b.HasOne("RedDown.Data.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RedDown.Data.Entities.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RedDown.Data.Entities.UserToken", b =>
                {
                    b.HasOne("RedDown.Data.Entities.AuthUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
